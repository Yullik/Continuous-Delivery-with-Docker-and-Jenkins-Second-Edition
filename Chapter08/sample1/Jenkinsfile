pipeline {
    agent { label 'docker-agent' }

    environment {
        GRADLEW_PATH = "./gradlew"
        BUILD_TIMESTAMP = "${env.BUILD_ID}"
        WORKSPACE_JAVA = "./Chapter08/sample1/"
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        DOCKER_REGISTRY = 'docker.io'
    }

    triggers {
        pollSCM('H * * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Yullik/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
            }
        }

        stage('Prepare Gradle Wrapper') {
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "chmod +x ${GRADLEW_PATH}"
                }
            }
        }

        stage('Build') {
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} build"
                }
            }
        }

        stage('Unit test') {
            when {
                not { branch 'main' }
            }
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} test"
                }
            }
        }

        stage('Code coverage') {
            when {
                branch 'main'
            }
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} jacocoTestReport"
                    sh "${GRADLEW_PATH} jacocoTestCoverageVerification"
                }
            }
        }

        stage('Static code analysis') {
            when {
                not { branch 'main' }
            }
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} checkstyleMain"
                }
            }
        }

        stage('Jacoco Checkstyle Test') {
            when {
                not { branch 'main' }
            }
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} checkstyleTest"
                    publishHTML(target: [
                        reportDir: 'build/reports/checkstyle',
                        reportFiles: 'main.html',
                        reportName: "Jacoco Checkstyle"
                    ])
                }
            }
        }

        stage('Package') {
            steps {
                dir("${WORKSPACE_JAVA}") {
                    sh "${GRADLEW_PATH} build"
                }
            }
        }

        stage('Docker Build and Push') {
    when {
        allOf {
            expression { return currentBuild.currentResult == 'SUCCESS' }
            not { branch 'playground' }
            not { branch 'main' }
            not { changeRequest() } // Skip pull requests like PR-8
        }
    }
        steps {
            script {
                def branchName = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                def imageName = ''
                def imageVersion = ''
    
                if (branchName == 'release') {
                    imageName = 'calculator'
                    imageVersion = '1.0'
                } else if (branchName.startsWith('feature/')) {
                    imageName = 'calculator-feature'
                    imageVersion = '0.1'
                } else {
                    error "Branch '${branchName}' is not supported for image creation."
                }
    
                def fullImageName = "localhost:5000/${imageName}:${imageVersion}"
                echo "Building and pushing Docker image: ${fullImageName}"
    
                def image = docker.build(fullImageName)
    
                docker.withRegistry('http://localhost:5000') {
                    image.push()
                }
            }
        }
    }

}

    post {
        success {
            echo "pipeline ran perfectly"
        }
        failure {
            echo "pipeline failure"
        }
    }
}

