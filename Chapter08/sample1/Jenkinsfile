pipeline {
    agent { label 'docker-agent' }  // Use the Docker agent with the 'docker-agent' label
    triggers {
        pollSCM('* * * * *') // Poll every minute
    }
    environment {
        GRADLEW_PATH = "./Chapter08/sample1/gradlew"  // Gradle wrapper path
        BUILD_TIMESTAMP = "${env.BUILD_ID}"  // Use Jenkins build ID as timestamp
    }
    stages {
        stage("Checkout") {
            steps {
                git branch: 'master', url: 'https://github.com/Yullik/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
            }
        }
        stage('Verify Workspace') {
            steps {
                sh 'ls -l'  // List files in the workspace to verify gradlew is present
            }
        }
        stage("Prepare Gradle Wrapper") {
            steps {
                sh "chmod +x ${GRADLEW_PATH}"  // Make gradlew executable
            }
        }
        stage("Compile") {
            steps {
                sh "${GRADLEW_PATH} build.gradle"  // Compile the Java project
            }
        }
        stage("Unit test") {
            steps {
                sh "${GRADLEW_PATH} test"  // Run unit tests
            }
        }
        stage("Code coverage") {
            when {
                changeset '**/*.java'  // Only run if a Java file is modified
            }
            steps {
                sh "${GRADLEW_PATH} jacocoTestReport"  // Generate JaCoCo test report
                sh "${GRADLEW_PATH} jacocoTestCoverageVerification"  // Verify coverage
            }
        }
        stage("Static code analysis") {
            steps {
                sh "${GRADLEW_PATH} checkstyleMain"  // Run static code analysis with Checkstyle
            }
        }
        stage("Jacoco Checkstyle Test") {
            when {
                changeset '**/*.java'  // Only run if a Java file is modified
            }
            steps {
                sh "${GRADLEW_PATH} checkstyleTest"  // Run Checkstyle on test files
                publishHTML(target: [
                    reportDir: 'build/reports/checkstyle',  
                    reportFiles: 'main.html',  
                    reportName: "Jacoco Checkstyle"
                ])  // Publish Checkstyle report
            }
        }
        stage("Package") {
            steps {
                sh "${GRADLEW_PATH} build"  // Build the project
            }
        }
        stage("Docker build") {
            steps {
                sh "docker build -t leszko/calculator:${BUILD_TIMESTAMP} ."  // Build Docker image
            }
        }
        stage("Docker login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-hub-credentials',
                               usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh "docker login --username $USERNAME --password $PASSWORD"  // Docker login
                }
            }
        }
        stage("Docker push") {
            steps {
                sh "docker push leszko/calculator:${BUILD_TIMESTAMP}"  // Push Docker image to registry
            }
        }
        stage("Update version") {
            steps {
                sh "sed -i 's/{{VERSION}}/${BUILD_TIMESTAMP}/g' calculator.yaml"  // Update version in calculator.yaml
            }
        }
        stage("Deploy to staging") {
            steps {
                sh "kubectl config use-context staging"  // Use Kubernetes staging context
                sh "kubectl apply -f hazelcast.yaml"  // Deploy Hazlecast
                sh "kubectl apply -f calculator.yaml"  // Deploy Calculator
            }
        }
        stage("Acceptance test") {
            steps {
                sleep 60  // Wait for deployments
                sh "chmod +x acceptance-test.sh && ./acceptance-test.sh"  // Run acceptance tests
            }
        }
        stage("Release") {
            steps {
                sh "kubectl config use-context production"  // Use Kubernetes production context
                sh "kubectl apply -f hazelcast.yaml"  // Deploy Hazlecast to production
                sh "kubectl apply -f calculator.yaml"  // Deploy Calculator to production
            }
        }
        stage("Smoke test") {
            steps {
                sleep 60  // Wait for deployments
                sh "chmod +x smoke-test.sh && ./smoke-test.sh"  // Run smoke tests
            }
        }
    }
    post {
        success {
            echo "pipeline ran perfectly"
        }
        failure {
            echo "pipeline failure"
        }
    }
}
