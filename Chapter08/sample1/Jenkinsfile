pipeline {
    agent any
    labels {
        docker-agent
    }
    environment {
        GRADLEW_PATH = "./gradlew"  // Gradle wrapper path
        BUILD_TIMESTAMP = "${env.BUILD_ID}"  // Use Jenkins build ID as timestamp
    }
    stages {
        stage("Checkout") {
            steps {
                git branch: 'master', url: 'https://github.com/Yullik/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
            }
        }
        
        stage("Prepare Gradle Wrapper") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "chmod +x ${GRADLEW_PATH}"  // Make gradlew executable
                }
            }
        }
        
        stage("Compile") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} compileJava"  // Compile the Java project
                }
            }
        }
        
        stage("Unit test") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} test"  // Run unit tests
                }
            }
        }
        
        stage("Code coverage") {
            when {
                changeset "**/*.java"  // Runs only when Java files are changed
            }
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} jacocoTestReport"  // Generate JaCoCo test report
                    sh "${GRADLEW_PATH} jacocoTestCoverageVerification"  // Verify coverage
                }
            }
        }

        stage("Static code analysis") {
            when {
                changeset "**/*.java"  // Runs only when Java files are changed
            }
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} checkstyleMain"  // Run static code analysis with Checkstyle
                }
            }
        }

        stage("Jacoco Checkstyle Test") {
            when {
                changeset "**/*.java"  // Runs only when Java files are changed
            }
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} checkstyleTest"  // Run Checkstyle on test files
                    publishHTML(target: [
                        reportDir: 'build/reports/checkstyle',
                        reportFiles: 'main.html',
                        reportName: "Jacoco Checkstyle"
                    ])  // Publish Checkstyle report
                }
            }
        }

        stage("Package") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "${GRADLEW_PATH} build"  // Build the project
                }
            }
        }
        
        stage('Docker build') {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "docker build -t leszko/calculator:39 ."
                }
            }
        }
        
        stage('Docker login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker login --username $USERNAME --password $PASSWORD"
                }
            }
        }
        
        stage('Docker push') {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "docker push leszko/calculator:39"
                }
            }
        }

        stage("Update version") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "sed -i 's/{{VERSION}}/${BUILD_TIMESTAMP}/g' calculator.yaml"  // Update version in calculator.yaml
                }
            }
        }
        
        stage("Deploy to staging") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "kubectl config use-context staging"  // Use Kubernetes staging context
                    sh "kubectl apply -f hazelcast.yaml"  // Deploy Hazelcast
                    sh "kubectl apply -f calculator.yaml"  // Deploy Calculator
                }
            }
        }

        stage("Acceptance test") {
            steps {
                sleep 60  // Wait for deployments
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "chmod +x acceptance-test.sh && ./acceptance-test.sh"  // Run acceptance tests
                }
            }
        }

        stage("Release") {
            steps {
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "kubectl config use-context production"  // Use Kubernetes production context
                    sh "kubectl apply -f hazelcast.yaml"  // Deploy Hazelcast to production
                    sh "kubectl apply -f calculator.yaml"  // Deploy Calculator to production
                }
            }
        }

        stage("Smoke test") {
            steps {
                sleep 60  // Wait for deployments
                dir("${WORKSPACE}/Chapter08/sample1") {
                    sh "chmod +x smoke-test.sh && ./smoke-test.sh"  // Run smoke tests
                }
            }
        }
    }
    post {
        success {
            echo 'pipeline ran perfectly'
        }
        failure {
            echo 'pipeline failure'
        }
    }
}


